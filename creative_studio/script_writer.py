import os
from creative_studio.models import call_text_model
from typing import Optional

def _read_image_bytes(image_path: str) -> Optional[bytes]:
    """Reads an image file and returns its content as bytes."""
    try:
        with open(image_path, "rb") as f:
            return f.read()
    except FileNotFoundError:
        print(f"SCRIPT WRITER: Error - Artwork image not found at {image_path}")
        return None
    except Exception as e:
        print(f"SCRIPT WRITER: Error reading image file: {e}")
        return None

def write_script(idea: str, artwork_path: str) -> str:
    """
    Generates a short script based on an idea and a visual artwork.

    This function uses a vision-capable text model to analyze the artwork
    and write a script that is thematically and visually consistent.

    Args:
        idea (str): The high-level concept (e.g., "Explain digital privacy").
        artwork_path (str): The file path to the generated artwork.

    Returns:
        str: A short script (a few sentences).
             Returns an empty string if an error occurs.
    """
    print(f"SCRIPT WRITER: Writing script for idea: '{idea}'")

    # 1. Define the 'role' for our AI model.
    system_prompt = (
        "You are a concise and engaging scriptwriter. Your job is to write a short script "
        "(2-3 sentences, approximately 30-50 words) for a character in an informational video. "
        "The script should be directly related to the provided idea and visually consistent "
        "with the character and scene in the image. The tone should be clear, helpful, and direct."
    )

    # 2. Define the specific 'task' for our AI model.
    user_prompt = (
        f"The core idea is: '{idea}'.\n\n"
        "Look at the character and the scene in the provided image. Write a short, "
        "spoken-word script for this character that explains the core idea. The script must "
        "be natural for a person to say. Do not include scene directions or character names, "
        "just the dialogue itself."
    )

    # 3. Read the artwork image into bytes.
    artwork_bytes = _read_image_bytes(artwork_path)
    if not artwork_bytes:
        print("SCRIPT WRITER: Could not proceed without artwork image.")
        return ""

    # 4. Call the text model to generate the script.
    script = call_text_model(
        model_name='gpt-4o',
        system_prompt=system_prompt,
        user_prompt=user_prompt,
        image_bytes=artwork_bytes
    )

    if script:
        print(f"SCRIPT WRITER: Successfully generated script:\n---\n{script}\n---")
    else:
        print("SCRIPT WRITER: Failed to generate a script.")

    return script.strip()

if __name__ == '__main__':
    # This is a direct test block for the script_writer.

    print("--- RUNNING DIRECT TEST FOR SCRIPT WRITER ---")

    # 1. Setup paths and test data
    # This test assumes an artwork file has already been generated by the artwork_builder test.
    artwork_file = "storage/images/test.png"

    if not os.path.exists(artwork_file):
        print(f"ERROR: Artwork file not found at '{artwork_file}'.")
        print("Please run the artwork_builder.py test first to generate it.")
    else:
        test_idea = "A character educating viewers about the importance of online security."
        try:
            # 2. Run the write_script function with the test data
            print("\nWriting script based on the existing artwork...")
            write_script(test_idea, artwork_file)

        except ImportError as e:
            print(f"\nIMPORT ERROR: {e}")
            print("To test this file directly, make sure 'models.py' is accessible,")
            print("and run this script from the root 'project/' directory.")
        except Exception as e:
            print(f"\nAn error occurred during the test run: {e}")
